import asyncio
from typing import Dict
from dateutil.relativedelta import relativedelta
import json
from decimal import Decimal
import logging
import os
from aiogram.types import Message
import datetime
from datetime import timedelta
import numpy as np
import os
import pandas as pd
import time
import yahoo_fin.stock_info as si
import random
from aiogram import types, Dispatcher, Bot
from datetime import datetime
import aioschedule
import asyncio
from boto3.dynamodb.conditions import Key
from decimal import Decimal, ROUND_HALF_UP
import yahoo_fin.stock_info as si
import matplotlib.pyplot as plt
from prophet import Prophet
from datetime import datetime, timedelta
from io import BytesIO
from yahoo_fin import stock_info
from aiogram import Bot, Dispatcher, types
from aiogram.utils.markdown import code
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import json
import logging
import os
import boto3
from botocore.exceptions import ClientError

dynamodb = boto3.resource(
    'dynamodb',
    endpoint_url="https://docapi.serverless.yandexcloud.net/ru-central1/b1g5ma3co0segbkhov3q/etngltj5g02bud0hv3ho",
    region_name='us-east-1',
    aws_access_key_id="YCAJEmJXKGtf9CY0don6scA6f",
    aws_secret_access_key="YCNlhuXkX_MgMZ9Q9kliPo15Q7wKH5_rwy2gIs0q"
)

# Logger initialization and logging level setting
log = logging.getLogger(__name__)
log.setLevel(os.environ.get('LOGGING_LEVEL', 'INFO').upper())
API_TOKEN = '6758375137:AAFosYicJRZd5C6AJYlzojaoxHAdpEOlTNM'
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –¢–µ–º–Ω–∞—è —Ç–µ–º–∞ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
plt.style.use('dark_background')


######################
# –ö–ª–∞—Å—Å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏—è csv —Å –∏—Å—Ç–æ—Ä–∏–µ–π
class Parser:
    def __init__(self, stock_file_name_constructor, requests_filename, stock_df_header,
                 first_request_history_days=1095):
        self.request_id = 0

        self.last_request_dict = {}

        self.stock_file_name_constructor = stock_file_name_constructor

        self.requests_filename = requests_filename
        self.stock_df_header = stock_df_header
        self.update_threshold = relativedelta(days=1)  # –¥–µ–ª—å—Ç–∞ –¥–Ω–µ–π
        self.first_request_history_days = first_request_history_days

    async def update_history(self):
        self.request_id += 1
        current_date = datetime.datetime.now()
        error_message = " 1 \n"
        await bot.send_message(message.chat.id, error_message)

        if (os.path.isfile(self.requests_filename)):
            error_message = " 2 \n"
            await bot.send_message(message.chat.id, error_message)
            requests = open(self.requests_filename, "r")
            requests_heading = requests.readline()

            for raw_row in requests:
                try:
                    error_message = " 3 \n"
                    await bot.send_message(message.chat.id, error_message)
                    row = raw_row.split(",")
                    stock_name = row[0]

                    stock_file_name = self.stock_file_name_constructor(stock_name)
                    if stock_name in self.last_request_dict:

                        start_date = self.last_request_dict[stock_name]
                    else:

                        start_date = current_date - self.first_request_history_days
                        stock_file = open(stock_file_name, "w")
                        stock_file.write(self.stock_df_header)
                        stock_file.close()
                    if (current_date - start_date > self.update_threshold):
                        historical_prices = si.get_data(stock_name, start_date, current_date)
                        historical_prices.to_csv(path_or_buf=stock_file_name, header=False, mode='a')
                        self.last_request_dict[stock_name] = current_date


                except Exception as e:
                    error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã –∞–∫—Ü–∏–∏."
                    await bot.send_message(message.chat.id, error_message)

            error_message = " 4 \n"
            await bot.send_message(message.chat.id, error_message)
            requests.close()
            os.remove(self.requests_filename)
            error_message = " 5 \n"
            await bot.send_message(message.chat.id, error_message)


def history_stock_df_name(stock_name):
    return f"greenery_bot-main/data/stocks/history_{stock_name}.csv"


requests_filename = "greenery_bot-main/data/stocks/requests.csv"
stock_df_header = "Datetime,Open,High,Low,Close,Adj Close,Volume,Ticker\n"

default_parser = Parser(stock_file_name_constructor=history_stock_df_name, \
                        requests_filename=requests_filename, \
                        stock_df_header=stock_df_header)


##############################

async def save_stock_alert(telegram_id, current_datetime, stock_name, current_price, percentage, sign):
    dynamodb = boto3.resource(
        'dynamodb',
        endpoint_url="https://docapi.serverless.yandexcloud.net/ru-central1/b1g5ma3co0segbkhov3q/etngltj5g02bud0hv3ho",
        region_name='us-east-1',
        aws_access_key_id="YCAJEmJXKGtf9CY0don6scA6f",
        aws_secret_access_key="YCNlhuXkX_MgMZ9Q9kliPo15Q7wKH5_rwy2gIs0q"
    )

    DYNAMODB_TABLE_NAME = 'StockAlerts'
    existing_tables = dynamodb.meta.client.list_tables()['TableNames']
    if DYNAMODB_TABLE_NAME not in existing_tables:
        table = dynamodb.create_table(
            TableName=DYNAMODB_TABLE_NAME,
            KeySchema=[
                {
                    'AttributeName': 'telegram_id',
                    'KeyType': 'HASH'
                },
                {
                    'AttributeName': 'current_datetime',
                    'KeyType': 'RANGE'
                }
            ],
            AttributeDefinitions=[
                {'AttributeName': 'telegram_id', 'AttributeType': 'S'},
                {'AttributeName': 'current_datetime', 'AttributeType': 'S'},
                {'AttributeName': 'stock_name', 'AttributeType': 'S'},
                {'AttributeName': 'current_price', 'AttributeType': 'N'},
                {'AttributeName': 'percentage', 'AttributeType': 'N'},
                {'AttributeName': 'sign', 'AttributeType': 'N'}
            ],
            ProvisionedThroughput={
                'ReadCapacityUnits': 5,
                'WriteCapacityUnits': 5
            }
        )

        table.wait_until_exists()

    table = dynamodb.Table(DYNAMODB_TABLE_NAME)

    stock_data = {
        'telegram_id': str(telegram_id),
        'current_datetime': current_datetime,
        'stock_name': stock_name,
        'current_price': Decimal(str(current_price)),
        'percentage': Decimal(str(percentage)),
        'sign': int(sign)
    }

    table.put_item(Item=stock_data)


async def start_monitoring(message: types.Message):
    try:
        log.debug(f"Executing start_monitoring for message: {message}")
        command_parts = message.text.split()
        if len(command_parts) < 2:
            raise IndexError("No stock symbol provided")

        stock_symbol = command_parts[1].upper()
        current_price = stock_info.get_live_price(stock_symbol)
        percentage = 5.0
        sign = 1

        await save_stock_alert(message.from_user.id, str(datetime.now()), stock_symbol, current_price, percentage, sign)
        response_text = f"–£—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ü–∏–∏ {stock_symbol}. –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price:.2f}"
        await bot.send_message(message.chat.id, response_text)

    except IndexError:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª —Å–∏–º–≤–æ–ª –∞–∫—Ü–∏–∏
        error_message = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–∏–∫–µ—Ä –∞–∫—Ü–∏–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /start_monitoring.\n" \
                        f"–ù–∞–ø—Ä–∏–º–µ—Ä: <code>/start_monitoring YNDX</code>."
        await bot.send_message(message.chat.id, error_message, parse_mode="HTML")


    except Exception as e:
        # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∞–∫—Ü–∏–∏
        error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ.\n" \
                        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–∏–∫–µ—Ä –∞–∫—Ü–∏–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /start_monitoring.\n" \
                        f"–ù–∞–ø—Ä–∏–º–µ—Ä: <code>/start_monitoring YNDX</code>."
        await bot.send_message(message.chat.id, error_message, parse_mode="HTML")
        logging.error(error_message)


async def get_stock_alerts(message: types.Message):
    telegram_id = message.from_user.id
    dynamodb = boto3.resource('dynamodb', endpoint_url=DYNAMODB_ENDPOINT,
                              region_name='us-east-1',
                              aws_access_key_id=AWS_ACCESS_KEY_ID,
                              aws_secret_access_key=AWS_SECRET_ACCESS_KEY)
    table = dynamodb.Table(DYNAMODB_TABLE_NAME)
    response = table.query(
        KeyConditionExpression=Key('telegram_id').eq(str(telegram_id))
    )
    stock_alerts = response.get('Items', [])
    return stock_alerts


# Handlers
async def welcome(message: types.Message):
    welcome_text = "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å —Ä–∞–∑–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏ —Å —Ü–µ–Ω–Ω—ã–º–∏ –±—É–º–∞–≥–∞–º–∏.\n" \
                   "–í–≤–µ–¥–∏—Ç–µ /help, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, —á–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å! "
    await bot.send_message(message.chat.id, welcome_text)


async def help_command(message: types.Message):
    help_text = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n" \
                "/start - –ù–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µüí∞\n" \
                "/moment_price - –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ü–∏–∏üëÄ\n" \
                "/stock_history - –ü–æ–ª—É—á–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞–∫—Ü–∏–∏üìà\n" \
                "/start_monitoring - –ü–æ—Å—Ç–∞–≤–∏—Ç—å –∞–∫—Ü–∏—é –Ω–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µüîé\n" \
                "/predict_price - –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞–∫—Ü–∏–∏ü™Ñ\n" \
                "/parrot - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –ø–æ–ø—É–≥–∞—èü¶ú\n" \
                "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µü§Ø"
    await message.answer(help_text)


async def send_random_parrot(message: types.Message):
    parrot_number = random.randint(1, 16)
    parrot_filename = f'greenery_bot-main/data/parrots/parrot{parrot_number}.jpeg'

    with open(parrot_filename, 'rb') as photo:
        await bot.send_photo(message.chat.id, photo, caption='–°–ª—É—á–∞–π–Ω—ã–π –ø–æ–ø—É–≥–∞–π ü¶ú',
                             reply_to_message_id=message.message_id)


async def get_stock_price(message: types.Message):
    try:
        log.debug(f"–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è get_stock_price –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è: {message}")

        # –†–∞–∑–±–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–∏–º–≤–æ–ª –∞–∫—Ü–∏–∏
        command_parts = message.text.split()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∏–º–≤–æ–ª –∞–∫—Ü–∏–∏
        if len(command_parts) < 2:
            raise IndexError("–ù–µ —É–∫–∞–∑–∞–Ω —Å–∏–º–≤–æ–ª –∞–∫—Ü–∏–∏")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–∏–º–≤–æ–ª –∞–∫—Ü–∏–∏ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        stock_symbol = command_parts[1].upper()

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–µ –∞–∫—Ü–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º yahoo_fin
        current_price = stock_info.get_live_price(stock_symbol)

        # –û—Ç–≤–µ—á–∞–µ–º —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–æ–π –∞–∫—Ü–∏–∏
        response_text = f"–ü–æ—Å–ª–µ–¥–Ω—è—è –∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ü–∏–∏ {stock_symbol}: ${current_price:.2f}"
        await bot.send_message(message.chat.id, response_text)

    except IndexError:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª —Å–∏–º–≤–æ–ª –∞–∫—Ü–∏–∏
        error_message = "–ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π,\n" \
                        f"—É–∫–∞–∂–∏—Ç–µ —Ç–∏–∫–µ—Ä –∞–∫—Ü–∏–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /moment_price.\n" \
                        f"–ù–∞–ø—Ä–∏–º–µ—Ä: <code>/moment_price AAPL</code>."
        await bot.send_message(message.chat.id, error_message, parse_mode="HTML")

    except Exception as e:
        # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã –∞–∫—Ü–∏–∏
        error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ.\n" \
                        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–∏–∫–µ—Ä –∞–∫—Ü–∏–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /moment_price.\n" \
                        f"–ù–∞–ø—Ä–∏–º–µ—Ä: <code>/moment_price AAPL</code>."
        await bot.send_message(message.chat.id, error_message, parse_mode="HTML")
        logging.error(error_message)


###
async def get_live_price(stock_name):
    ticker = yf.Ticker(stock_name)
    data = ticker.history(period='1d')
    if not data.empty:
        live_price = data['Close'].iloc[-1]
        return live_price
    return None


async def display_stranges(user_id, bot):
    table = dynamodb.Table('StockAlerts')
    response = table.query(
        KeyConditionExpression=Key('telegram_id').eq(str(user_id))
    )

    for item in response.get('Items', []):
        stock_name = item['stock_name']
        current_price = await get_live_price(stock_name)

        if current_price is not None:
            percentage = float(item['percentage'])
            sign = int(item['sign'])


async def scheduler(user_id, bot):
    aioschedule.every().day.at("12:00").do(display_stranges, user_id, bot)
    while True:
        await aioschedule.run_pending()
        await asyncio.sleep(1)


# async def on_startup(dp):
#     # Fetch all unique telegram_ids from the database
#     # Replace 'Users' with your actual DynamoDB table name
#     users_table = dynamodb.Table('Users')
#     response = users_table.scan(ProjectionExpression='telegram_id')
#     telegram_ids = {int(item['telegram_id']) for item in response.get('Items', [])}

#     # Initialize bot and dispatcher for each user
#     for user_id in telegram_ids:
#         user_bot = Bot(token=API_TOKEN)
#         user_dp = Dispatcher(user_bot)

#         # Register user-specific scheduler
#         asyncio.create_task(scheduler(user_id, user_bot))

#     return {'statusCode': 200, 'body': 'ok'}
###

async def get_stock_history(message: types.Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–∏–º–≤–æ–ª –∞–∫—Ü–∏–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        command_parts = message.text.split()
        if len(command_parts) < 3:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stock_history SYMBOL DAYS")

        stock_symbol = command_parts[1].upper()
        num_days = int(command_parts[2])

        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ü–µ–Ω—ã –∞–∫—Ü–∏–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
        end_date = datetime.now()
        start_date = end_date - relativedelta(days=num_days)  # –∫–æ–ª-–≤–æ –¥–Ω–µ–π (–¥–µ–ª—å—Ç–∞ –¥–Ω–µ–π)
        historical_prices = si.get_data(stock_symbol, start_date, end_date)

        # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Ü–µ–Ω
        plot_title = f"–ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω –∞–∫—Ü–∏–∏ {stock_symbol} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {num_days} –¥–Ω–µ–π"
        plt.figure(figsize=(10, 6))
        plt.plot(historical_prices.index, historical_prices['close'], marker='o', linestyle='-')
        plt.title(plot_title)
        plt.xlabel('–î–∞—Ç–∞')
        plt.ylabel('–¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è ($)')
        plt.grid(True)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ –æ–±—ä–µ–∫—Ç BytesIO
        img_buffer = BytesIO()
        plt.savefig(img_buffer, format='png')
        img_buffer.seek(0)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –∫–∞–∫ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_photo(message.chat.id, photo=img_buffer)

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
        plt.close()

    except ValueError as ve:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –Ω–µ–≤–µ—Ä–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
        error_message = "–ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π, —É–∫–∞–∂–∏—Ç–µ –∞–∫—Ü–∏—é –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π,\n" \
                        f"–∑–∞ –∫–æ—Ç–æ—Ä–æ–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –µ—ë –≥—Ä–∞—Ñ–∏–∫.\n" \
                        f"–ù–∞–ø—Ä–∏–º–µ—Ä: <code>/stock_history TSLA 14</code>."
        await bot.send_message(message.chat.id, error_message, parse_mode="HTML")

    except Exception as e:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö)
        error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ.\n" \
                        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞–∫—Ü–∏—é –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π, –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –µ—ë –≥—Ä–∞—Ñ–∏–∫.\n" \
                        f"–ù–∞–ø—Ä–∏–º–µ—Ä: <code>/stock_history TSLA 14</code>."
        await bot.send_message(message.chat.id, error_message, parse_mode="HTML")


async def get_stock_predict(message: types.Message):
    try:
        command_parts = message.text.split()
        if len(command_parts) < 3:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stock_history SYMBOL DAYS")

        Some_currency = command_parts[1].upper()
        num_days = int(command_parts[2])
        end_date = datetime.now()
        start_date = end_date - timedelta(days=1000)
        df = si.get_data(f"{Some_currency}", start_date, end_date).reset_index().iloc[:, :2].rename(
            columns={'index': 'ds', 'open': 'y'})

        df['ds'] = pd.to_datetime(df['ds'])
        df = df[['ds', 'y']].tail(100).reset_index(drop=True)

        model = Prophet(growth='linear', n_changepoints=40)
        model.fit(df)

        future = model.make_future_dataframe(periods=num_days, freq='D')

        forecast = model.predict(future)
        print(forecast)
        predicted_value = forecast[['ds', 'yhat']].tail(num_days)

        plot_title = f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ü–µ–Ω –∞–∫—Ü–∏–∏ {Some_currency} –Ω–∞ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ {num_days} –¥–Ω–µ–π"
        plt.figure(figsize=(10, 6))
        plt.plot(df['ds'].iloc[len(df) - num_days:len(df)] + pd.DateOffset(days=num_days), predicted_value['yhat'],
                 marker='o', linestyle='-')
        plt.title(plot_title)
        plt.xlabel('–î–∞—Ç–∞')
        plt.ylabel('–¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è ($)')
        plt.grid(True)
        img_buffer = BytesIO()
        plt.savefig(img_buffer, format='png')
        img_buffer.seek(0)

        await bot.send_photo(message.chat.id, photo=img_buffer)

        plt.close()

    except ValueError as ve:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –Ω–µ–≤–µ—Ä–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
        error_message = "–ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π, —É–∫–∞–∂–∏—Ç–µ –∞–∫—Ü–∏—é –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π,\n" \
                        f"–∑–∞ –∫–æ—Ç–æ—Ä–æ–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –µ—ë –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π.\n" \
                        f"–ù–∞–ø—Ä–∏–º–µ—Ä: <code>/predict_price BTC-USD 7</code>."
        await bot.send_message(message.chat.id, error_message, parse_mode="HTML")

    except Exception as e:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö)
        error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ.\n" \
                        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞–∫—Ü–∏—é –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π,\n" \
                        f"–∑–∞ –∫–æ—Ç–æ—Ä–æ–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –µ—ë –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π.\n" \
                        f"–ù–∞–ø—Ä–∏–º–µ—Ä: <code>/predict_price BTC-USD 7</code>."
        await bot.send_message(message.chat.id, error_message, parse_mode="HTML")


async def unknown_message(message: types.Message):
    response_text = "–ú—ã –ø–æ–∫–∞ –Ω–µ —É–º–µ–µ–º –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Ç–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. \n" \
                    "–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø–∏—à–∏—Ç–µ /help."
    await bot.send_message(message.chat.id, response_text)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è Yandex.Cloud
async def register_handlers(dp: Dispatcher):
    """Registration all handlers before processing update."""
    dp.register_message_handler(welcome, commands=['start'])
    dp.register_message_handler(help_command, commands=['help'])
    dp.register_message_handler(send_random_parrot, commands=['parrot'])
    dp.register_message_handler(get_stock_price, commands=['moment_price'])
    dp.register_message_handler(get_stock_history, commands=['stock_history'])
    dp.register_message_handler(get_stock_predict, commands=['predict_price'])
    dp.register_message_handler(start_monitoring, commands=['start_monitoring'])
    dp.register_message_handler(unknown_message)
    log.debug('Handlers are registered.')


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è Yandex.Cloud
async def process_event(event, dp: Dispatcher):
    """
    Converting a Yandex.Cloud functions event to an update and
    handling the update.
    """

    update = json.loads(event['body'])
    log.debug('Update: ' + str(update))

    Bot.set_current(dp.bot)
    update = types.Update.to_object(update)
    await dp.process_update(update)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è Yandex.Cloud
async def handler(event, context):
    if event['httpMethod'] == 'POST':
        # Bot and dispatcher initialization
        bot = Bot(token=API_TOKEN)
        dp = Dispatcher(bot)

        await register_handlers(dp)
        await process_event(event, dp)

        return {'statusCode': 200, 'body': 'ok'}
    return {'statusCode': 200, 'body': 'ok'}
