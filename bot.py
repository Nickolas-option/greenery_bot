import logging
import random

from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters.state import State, StatesGroup

API_TOKEN = '6758375137:AAFosYicJRZd5C6AJYlzojaoxHAdpEOlTNM'
logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)


class TrackingState(StatesGroup):
    waiting_for_stock_symbol = State()
    waiting_for_interval = State()


@dp.message_handler(commands=['start'])
async def welcome(message: types.Message):
    welcome_text = "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å —Ä–∞–∑–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏ —Å —Ü–µ–Ω–Ω—ã–º–∏ –±—É–º–∞–≥–∞–º–∏.\n" \
                   "–í–≤–µ–¥–∏—Ç–µ /help, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, —á–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å! "
    await bot.send_message(message.chat.id, welcome_text)


@dp.message_handler(commands=['help'])
async def help_command(message: types.Message):
    help_text = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n" \
                "/start - –ù–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µüí∞\n" \
                "/actions - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—èüëÄ\n" \
                "/parrot - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –ø–æ–ø—É–≥–∞—èü¶ú\n" \
                "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µü§Ø"
    await message.answer(help_text)


@dp.message_handler(commands=['actions'])
async def show_actions_keyboard(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    buttons = ["–ó–∞–ø—Ä–æ—Å–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ü–∏–∏", "–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ü–∏–∏", "–ü–æ—Å—Ç–∞–≤–∏—Ç—å –∞–∫—Ü–∏—é –Ω–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ"]
    keyboard.add(*buttons)
    await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

    @dp.message_handler(lambda message1: message1.text == "–ü–æ—Å—Ç–∞–≤–∏—Ç—å –∞–∫—Ü–∏—é –Ω–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ")
    async def start_tracking(message1: types.Message):
        keyboard_stocks = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        buttons_stocks = ["Apple", "Google", "Microsoft"]
        keyboard_stocks.add(*buttons_stocks)
        await bot.send_message(message.chat.id, "–ö–∞–∫—É—é –∞–∫—Ü–∏—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ?",
                               reply_markup=keyboard_stocks)

        @dp.message_handler(lambda message2: message2.text in buttons_stocks)
        async def time_tracking(message2: types.Message):
            keyboard_for_tracking = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            buttons_time_for_tracking = ["30 –º–∏–Ω—É—Ç", "2 —á–∞—Å–∞", "–°—É—Ç–∫–∏"]
            keyboard_for_tracking.add(*buttons_time_for_tracking)
            await bot.send_message(message.chat.id,
                                   f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∞–∫—Ü–∏—é {message2.text}. –ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ü–∏–∏?",
                                   reply_markup=keyboard_for_tracking)

            @dp.message_handler(lambda message3: message3.text in buttons_time_for_tracking)
            async def process_interval(message3: types.Message):
                response_text = f"–ê–∫—Ü–∏—è {message2.text} –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º {message3.text}."
                await bot.send_message(message.chat.id, response_text)


@dp.message_handler(lambda message: message.text == "–ó–∞–ø—Ä–æ—Å–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ü–∏–∏")
async def stock_price_request(message: types.Message):
    response_text = "–°—Ç–æ–π–º–æ—Å—Ç—å –∞–∫—Ü–∏–∏: $100"
    await bot.send_message(message.chat.id, response_text)


@dp.message_handler(lambda message: message.text == "–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ü–∏–∏")
async def predict_stock_price(message: types.Message):
    response_text = "–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Å—Ç–æ–π–º–æ—Å—Ç—å –∞–∫—Ü–∏–∏: $120"
    await bot.send_message(message.chat.id, response_text)


@dp.message_handler(commands=['parrot'])
async def send_random_parrot(message: types.Message):
    parrot_number = random.randint(1, 16)
    parrot_filename = f'data/parrots/parrot{parrot_number}.jpeg'

    with open(parrot_filename, 'rb') as photo:
        await bot.send_photo(message.chat.id, photo, caption='–°–ª—É—á–∞–π–Ω—ã–π –ø–æ–ø—É–≥–∞–π ü¶ú', reply_to_message_id=message.message_id)

@dp.message_handler()
async def unknown_message(message: types.Message):
    response_text = "–ú—ã –ø–æ–∫–∞ –Ω–µ —É–º–µ–µ–º –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Ç–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. \n" \
                    "–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø–∏—à–∏—Ç–µ /help."
    await bot.send_message(message.chat.id, response_text)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
