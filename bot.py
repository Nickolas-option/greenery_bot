import asyncio
import json
import logging
import os
import random
 
from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
 
# Logger initialization and logging level setting
log = logging.getLogger(__name__)
log.setLevel(os.environ.get('LOGGING_LEVEL', 'INFO').upper())
 
API_TOKEN = 'TOKEN'  
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
 
 
# Handlers
async def welcome(message: types.Message):
    welcome_text = "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å —Ä–∞–∑–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏ —Å —Ü–µ–Ω–Ω—ã–º–∏ –±—É–º–∞–≥–∞–º–∏.\n" \
                   "–í–≤–µ–¥–∏—Ç–µ /help, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, —á–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å! "
    await bot.send_message(message.chat.id, welcome_text)
 
 
async def help_command(message: types.Message):
    help_text = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n" \
                "/start - –ù–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µüí∞\n" \
                "/actions - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—èüëÄ\n" \
                "/parrot - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –ø–æ–ø—É–≥–∞—èü¶ú\n" \
                "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µü§Ø"
    await message.answer(help_text)
 
 
async def show_actions_keyboard(message: types.Message, state: FSMContext):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    buttons = ["–ó–∞–ø—Ä–æ—Å–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ü–∏–∏", "–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ü–∏–∏", "–ü–æ—Å—Ç–∞–≤–∏—Ç—å –∞–∫—Ü–∏—é –Ω–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ"]
    keyboard.add(*buttons)
    await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
 
 
async def start_tracking(message: types.Message):
    response_text = f"–ê–∫—Ü–∏—è {message.text} –±—ã–ª–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ."
    await bot.send_message(message.chat.id, response_text)
 
 
async def stock_price_request(message: types.Message):
    response_text = "–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ü–∏–∏: $100"
    await bot.send_message(message.chat.id, response_text)
 
 
async def predict_stock_price(message: types.Message):
    response_text = "–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ü–∏–∏: $120"
    await bot.send_message(message.chat.id, response_text)
 
 
async def send_random_parrot(message: types.Message):
    parrot_number = random.randint(1, 16)
    parrot_filename = f'greenery_bot-main/data/parrots/parrot{parrot_number}.jpeg'
 
    with open(parrot_filename, 'rb') as photo:
        await bot.send_photo(message.chat.id, photo, caption='–°–ª—É—á–∞–π–Ω—ã–π –ø–æ–ø—É–≥–∞–π ü¶ú',
                             reply_to_message_id=message.message_id)
 
 
async def unknown_message(message: types.Message):
    response_text = "–ú—ã –ø–æ–∫–∞ –Ω–µ —É–º–µ–µ–º –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Ç–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. \n" \
                    "–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø–∏—à–∏—Ç–µ /help."
    await bot.send_message(message.chat.id, response_text)
 
 
# Functions for Yandex.Cloud
async def register_handlers(dp: Dispatcher):
    """Registration all handlers before processing update."""
    dp.register_message_handler(welcome, commands=['start'])
    dp.register_message_handler(help_command, commands=['help'])
    dp.register_message_handler(show_actions_keyboard, commands=['actions'])
    dp.register_message_handler(start_tracking, lambda message: message.text == "–ü–æ—Å—Ç–∞–≤–∏—Ç—å –∞–∫—Ü–∏—é –Ω–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ")
    dp.register_message_handler(stock_price_request, lambda message: message.text == "–ó–∞–ø—Ä–æ—Å–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ü–∏–∏")
    dp.register_message_handler(predict_stock_price, lambda message: message.text == "–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ü–∏–∏")
    dp.register_message_handler(send_random_parrot, commands=['parrot'])
    dp.register_message_handler(unknown_message)
 
    log.debug('Handlers are registered.')
 
 
async def process_event(event, dp: Dispatcher):
    """
    Converting a Yandex.Cloud functions event to an update and
    handling the update.
    """
 
    update = json.loads(event['body'])
    log.debug('Update: ' + str(update))
 
    Bot.set_current(dp.bot)
    update = types.Update.to_object(update)
    await dp.process_update(update)
 
 
async def handler(event, context):
    if event['httpMethod'] == 'POST':
        # Bot and dispatcher initialization
        bot = Bot(token=API_TOKEN)
        dp = Dispatcher(bot)
 
        await register_handlers(dp)
        await process_event(event, dp)
 
        return {'statusCode': 200, 'body': 'ok'}
    return {'statusCode': 200, 'body': 'ok'}
