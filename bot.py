import asyncio
import json
import logging
import os
import random
from yahoo_fin import stock_info

from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
    
# Logger initialization and logging level setting
log = logging.getLogger(__name__)
log.setLevel(os.environ.get('LOGGING_LEVEL', 'INFO').upper())
API_TOKEN = '6758375137:AAFosYicJRZd5C6AJYlzojaoxHAdpEOlTNM'
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)


# Handlers
async def welcome(message: types.Message):
    welcome_text = "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å —Ä–∞–∑–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏ —Å —Ü–µ–Ω–Ω—ã–º–∏ –±—É–º–∞–≥–∞–º–∏.\n" \
                   "–í–≤–µ–¥–∏—Ç–µ /help, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, —á–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å! "
    await bot.send_message(message.chat.id, welcome_text)


async def help_command(message: types.Message):
    help_text = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n" \
                "/start - –ù–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ üí∞\n" \
                "/getprice - –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ü–∏–∏ üëÄ\n" \
                "/parrot - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –ø–æ–ø—É–≥–∞—è ü¶ú\n" \
                "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ü§Ø"
    await message.answer(help_text)


async def send_random_parrot(message: types.Message):
    parrot_number = random.randint(1, 16)
    parrot_filename = f'greenery_bot-main/data/parrots/parrot{parrot_number}.jpeg'

    with open(parrot_filename, 'rb') as photo:
        await bot.send_photo(message.chat.id, photo, caption='–°–ª—É—á–∞–π–Ω—ã–π –ø–æ–ø—É–≥–∞–π ü¶ú',
                             reply_to_message_id=message.message_id)


async def get_stock_price(message: types.Message):
    try:
        log.debug(f"–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è get_stock_price –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è: {message}")

        # –†–∞–∑–±–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–∏–º–≤–æ–ª –∞–∫—Ü–∏–∏
        command_parts = message.text.split()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∏–º–≤–æ–ª –∞–∫—Ü–∏–∏
        if len(command_parts) < 2:
            raise IndexError("–ù–µ —É–∫–∞–∑–∞–Ω —Å–∏–º–≤–æ–ª –∞–∫—Ü–∏–∏")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–∏–º–≤–æ–ª –∞–∫—Ü–∏–∏ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        stock_symbol = command_parts[1].upper()

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–µ –∞–∫—Ü–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º yahoo_fin
        current_price = stock_info.get_live_price(stock_symbol)

        # –û—Ç–≤–µ—á–∞–µ–º —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–æ–π –∞–∫—Ü–∏–∏
        response_text = f"–ü–æ—Å–ª–µ–¥–Ω—è—è –∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ü–∏–∏ {stock_symbol}: ${current_price:.2f}"
        await bot.send_message(message.chat.id, response_text)

    except IndexError:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª —Å–∏–º–≤–æ–ª –∞–∫—Ü–∏–∏
        error_message = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–∏–∫–µ—Ä –∞–∫—Ü–∏–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /getprice. –ù–∞–ø—Ä–∏–º–µ—Ä: \n" \
                        "/getprice AAPL"
        await bot.send_message(message.chat.id, error_message)

    except Exception as e:
        # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã –∞–∫—Ü–∏–∏
        error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã –∞–∫—Ü–∏–∏: {str(e)}"
        await bot.send_message(message.chat.id, error_message)
        logging.error(error_message)



async def unknown_message(message: types.Message):
    response_text = "–ú—ã –ø–æ–∫–∞ –Ω–µ —É–º–µ–µ–º –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Ç–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. \n" \
                    "–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø–∏—à–∏—Ç–µ /help."
    await bot.send_message(message.chat.id, response_text)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è Yandex.Cloud
async def register_handlers(dp: Dispatcher):
    """Registration all handlers before processing update."""
    dp.register_message_handler(welcome, commands=['start'])
    dp.register_message_handler(help_command, commands=['help'])
    dp.register_message_handler(send_random_parrot, commands=['parrot'])
    dp.register_message_handler(get_stock_price, commands=['getprice'])
    dp.register_message_handler(unknown_message)

    log.debug('Handlers are registered.')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è Yandex.Cloud
async def process_event(event, dp: Dispatcher):
    """
    Converting a Yandex.Cloud functions event to an update and
    handling the update.
    """

    update = json.loads(event['body'])
    log.debug('Update: ' + str(update))

    Bot.set_current(dp.bot)
    update = types.Update.to_object(update)
    await dp.process_update(update)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è Yandex.Cloud
async def handler(event, context):
    if event['httpMethod'] == 'POST':
        # Bot and dispatcher initialization
        bot = Bot(token=API_TOKEN)
        dp = Dispatcher(bot)

        await register_handlers(dp)
        await process_event(event, dp)

        return {'statusCode': 200, 'body': 'ok'}
    return {'statusCode': 200, 'body': 'ok'}
